// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StudyCareVisteService.Data;

#nullable disable

namespace StudyCareVisteService.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241104125612_a")]
    partial class a
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("StudyCareVisteService.Model.StudyCareVist", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateOnly>("LastVisitDate")
                        .HasColumnType("date");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("VisitNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("StudyCareVists");
                });

            modelBuilder.Entity("StudyCareVisteService.Model.StudyCareVist", b =>
                {
                    b.OwnsOne("StudyCareVisteService.ValueObjects.BusinessOwner", "BusinessOwner", b1 =>
                        {
                            b1.Property<Guid>("StudyCareVistId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("ActivitySection")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<long>("AgreementNumber")
                                .HasColumnType("bigint");

                            b1.Property<string>("AreaOfTheEstablishment")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("BusinessOwnerName")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("CommercialName")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("CommercialRegistrationExpiryDate")
                                .HasColumnType("datetime2");

                            b1.Property<long>("CommercialRegistrationNumber")
                                .HasColumnType("bigint");

                            b1.Property<string>("DescriptionOfTheActivity")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<decimal>("DisbursedPaymentsNumber")
                                .HasColumnType("decimal(18,2)");

                            b1.Property<string>("Email")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("ExpiryDate")
                                .HasColumnType("datetime2");

                            b1.Property<long>("IDNumber")
                                .HasColumnType("bigint");

                            b1.Property<string>("InsuranceType")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("IsDeductionMade")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("LicenseExpiryDate")
                                .HasColumnType("datetime2");

                            b1.Property<long>("LicenseNumber")
                                .HasColumnType("bigint");

                            b1.Property<long>("MobileNumber")
                                .HasColumnType("bigint");

                            b1.Property<string>("NationalAddressOfTheEstablishment")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Neighborhood")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("PartnerEntity")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ProjectPath")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ProjectPhase")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ProjectStatus")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SiteOwnership")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<long>("SpecialLicensesNumber")
                                .HasColumnType("bigint");

                            b1.Property<long>("SponsorMobileNumber")
                                .HasColumnType("bigint");

                            b1.Property<string>("SponsorName")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("StreetName")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("TransferDate")
                                .HasColumnType("datetime2");

                            b1.Property<long>("UnitNumber")
                                .HasColumnType("bigint");

                            b1.HasKey("StudyCareVistId");

                            b1.ToTable("StudyCareVists");

                            b1.WithOwner()
                                .HasForeignKey("StudyCareVistId");
                        });

                    b.OwnsOne("StudyCareVisteService.ValueObjects.CheckerRepresentative", "CheckerRepresentative", b1 =>
                        {
                            b1.Property<Guid>("StudyCareVistId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateOnly>("Date")
                                .HasColumnType("date");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Signature")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("StudyCareVistId");

                            b1.ToTable("StudyCareVists");

                            b1.WithOwner()
                                .HasForeignKey("StudyCareVistId");
                        });

                    b.OwnsOne("StudyCareVisteService.ValueObjects.ClassifySuccessStory", "ClassifySuccessStory", b1 =>
                        {
                            b1.Property<Guid>("StudyCareVistId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<bool>("MeetCriteria")
                                .HasColumnType("bit");

                            b1.Property<bool>("PublishSuccessStory")
                                .HasColumnType("bit");

                            b1.HasKey("StudyCareVistId");

                            b1.ToTable("StudyCareVists");

                            b1.WithOwner()
                                .HasForeignKey("StudyCareVistId");
                        });

                    b.OwnsOne("StudyCareVisteService.ValueObjects.CollectionData", "CollectionData", b1 =>
                        {
                            b1.Property<Guid>("StudyCareVistId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<long>("AmountPaid")
                                .HasColumnType("bigint");

                            b1.Property<DateOnly>("DateFirstInstallment")
                                .HasColumnType("date");

                            b1.Property<DateOnly>("DateLastInstallment")
                                .HasColumnType("date");

                            b1.Property<int>("DaysOverdueNumber")
                                .HasColumnType("int");

                            b1.Property<int>("GracePeriod")
                                .HasColumnType("int");

                            b1.Property<int>("NumberInstallmentsPaid")
                                .HasColumnType("int");

                            b1.Property<int>("NumberOverdueInstallments")
                                .HasColumnType("int");

                            b1.Property<int>("OverdueAmountNumber")
                                .HasColumnType("int");

                            b1.Property<int>("PaymentPeriod")
                                .HasColumnType("int");

                            b1.Property<string>("PaymentStatus")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("StudyCareVistId");

                            b1.ToTable("StudyCareVists");

                            b1.WithOwner()
                                .HasForeignKey("StudyCareVistId");
                        });

                    b.OwnsOne("StudyCareVisteService.ValueObjects.CollectionEfforts", "CollectionEfforts", b1 =>
                        {
                            b1.Property<Guid>("StudyCareVistId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("CollectionEffort")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateOnly>("Date")
                                .HasColumnType("date");

                            b1.Property<string>("ResponsibleForCollection")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Type")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("StudyCareVistId");

                            b1.ToTable("StudyCareVists");

                            b1.WithOwner()
                                .HasForeignKey("StudyCareVistId");
                        });

                    b.OwnsOne("StudyCareVisteService.ValueObjects.ConsultingService", "ConsultingService", b1 =>
                        {
                            b1.Property<Guid>("StudyCareVistId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("ApprovalVisitReport")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("BranchManagementRecommendations")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ConsultationRequestCriteria")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<bool>("CorrectiveConsulting")
                                .HasColumnType("bit");

                            b1.Property<string>("NotesVisitEvaluator")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ReasonRequestingConsultation")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("TypeConsultation")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("StudyCareVistId");

                            b1.ToTable("StudyCareVists");

                            b1.WithOwner()
                                .HasForeignKey("StudyCareVistId");
                        });

                    b.OwnsOne("StudyCareVisteService.ValueObjects.FinancialData", "FinancialData", b1 =>
                        {
                            b1.Property<Guid>("StudyCareVistId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<long>("ExpensesCurrentQuarter")
                                .HasColumnType("bigint");

                            b1.Property<long>("ExpensesPreviousQuarter")
                                .HasColumnType("bigint");

                            b1.Property<long>("NationalityNumbers")
                                .HasColumnType("bigint");

                            b1.Property<long>("NetCurrentQuarter")
                                .HasColumnType("bigint");

                            b1.Property<long>("NetPreviousQuarter")
                                .HasColumnType("bigint");

                            b1.Property<long>("NonSaudiFemale")
                                .HasColumnType("bigint");

                            b1.Property<long>("NonSaudiMale")
                                .HasColumnType("bigint");

                            b1.Property<long>("NonSaudiTotal")
                                .HasColumnType("bigint");

                            b1.Property<long>("ProjectBudget")
                                .HasColumnType("bigint");

                            b1.Property<long>("RevenuesCurrentQuarter")
                                .HasColumnType("bigint");

                            b1.Property<long>("RevenuesPreviousQuarter")
                                .HasColumnType("bigint");

                            b1.Property<long>("SaudiFemale")
                                .HasColumnType("bigint");

                            b1.Property<long>("SaudiMale")
                                .HasColumnType("bigint");

                            b1.Property<long>("SaudiTotal")
                                .HasColumnType("bigint");

                            b1.Property<int>("SaudizationPercentage")
                                .HasColumnType("int");

                            b1.Property<long>("Total")
                                .HasColumnType("bigint");

                            b1.HasKey("StudyCareVistId");

                            b1.ToTable("StudyCareVists");

                            b1.WithOwner()
                                .HasForeignKey("StudyCareVistId");
                        });

                    b.OwnsOne("StudyCareVisteService.ValueObjects.ObservedViolations", "ObservedViolations", b1 =>
                        {
                            b1.Property<Guid>("StudyCareVistId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("TypeViolation")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("StudyCareVistId");

                            b1.ToTable("StudyCareVists");

                            b1.WithOwner()
                                .HasForeignKey("StudyCareVistId");
                        });

                    b.OwnsOne("StudyCareVisteService.ValueObjects.VisitExecutor", "VisitExecutor", b1 =>
                        {
                            b1.Property<Guid>("StudyCareVistId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateOnly>("Date")
                                .HasColumnType("date");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Signature")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("StudyCareVistId");

                            b1.ToTable("StudyCareVists");

                            b1.WithOwner()
                                .HasForeignKey("StudyCareVistId");
                        });

                    b.Navigation("BusinessOwner")
                        .IsRequired();

                    b.Navigation("CheckerRepresentative");

                    b.Navigation("ClassifySuccessStory");

                    b.Navigation("CollectionData")
                        .IsRequired();

                    b.Navigation("CollectionEfforts");

                    b.Navigation("ConsultingService")
                        .IsRequired();

                    b.Navigation("FinancialData");

                    b.Navigation("ObservedViolations");

                    b.Navigation("VisitExecutor");
                });
#pragma warning restore 612, 618
        }
    }
}
